-----------------
DESCRIPTION
-----------------

This is a C++ Property List (plist) serialization library (MIT license).
It supports both XML and binary versions of the plist format and is designed to
be cross platform with minimal dependencies.  The interface is simply a set of
static methods which serialize a subset of stdlib containers to plists (as well
as the inverse operation of deserializing plists into stdlib containers).

It uses std::any as a generic type in order to support heterogenous
containers, e.g. a dictionary is a map<string, any> and an array is a
vector<any>.  The supported stdlib containers and their associations to plist
types is shown below. 

plist           C++
__________________________________________________________________________________

string          std::string 
integer         short, int, long, int32_t, int64_t (always deserializes as int64_t)
real            double, float (always deserializes as double)
dictionary      std::map<std::string, std::any>
array           std::vector<std::any>
date            PlistDate (included class in PlistDate.hpp)
data            std::vector<char>
boolean         bool

-----------------
USAGE
-----------------

See src/plistTests.cpp for examples of reading and writing all types to both
XML and binary.  E.g. to read a plist from disk whose root node is a
dictionary:

		map<string, std::any> dict; 
		Plist::readPlist("binaryExample1.plist", dict);

The plist format (binary or XML) is automatically detected so call the same
readPlist method for XML

		Plist::readPlist("XMLExample1.plist", dict);

To write a plist, e.g. dictionary

		map<string, std::any> dict;
		populateDictionary(dict);
		Plist::writePlistXML("xmlExampleWritten.plist", dict);

and for a binary plist

		Plist::writePlistBinary("binaryExampleWritten.plist", dict);

The other public methods allow for reading and writing from streams and byte
arrays.  Again, see the test suite code src/plistTests.cpp for comprehensive
examples. 

-----------------
LIMITATIONS
-----------------

Unicode strings are currently not supported. 

-----------------
INSTALL
-----------------

Simply copy src/Plist.hpp, src/PlistDate.hpp, src/pugixml.hpp,
src/pugiconfig.hpp, src/base64.hpp and src/pugixml.cpp to your project.

-----------------
BUILD
-----------------

See BUILDING.md.
